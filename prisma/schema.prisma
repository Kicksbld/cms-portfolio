// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum BlockType {
  TEXT
  IMAGE
}

///////////////////////////
// USER & AUTH
///////////////////////////

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  biography         String?  @default("")
  profilePictureUrl String?  @map("profile_picture_url")
  bannerUrl         String?  @map("banner_url")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  links          Link[]
  experiences    Experience[]
  bentoBlocks    BentoBlock[]
  projectMembers ProjectMember[]
}

///////////////////////////
// PROFIL
///////////////////////////
model Link {
  id        Int    @id @default(autoincrement())
  profileId String
  title     String
  url       String
  icon      String

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("link")
}

model Experience {
  id          Int       @id @default(autoincrement())
  profileId   String    @map("profile_id")
  title       String
  type        String
  location    String
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  description String?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId], name: "idx_experience_profile_id")
  @@map("experience")
}

model BentoBlock {
  id        Int    @id @default(autoincrement())
  profileId String @map("user_id")
  title     String

  profile  Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  contents BentoItemContent[]

  @@index([profileId], name: "idx_bento_profile_id")
  @@map("bento_block")
}

model BentoItemContent {
  id           Int    @id @default(autoincrement())
  bentoBlockId Int    @map("bento_id")
  contentText  String

  bentoBlock BentoBlock @relation(fields: [bentoBlockId], references: [id], onDelete: Cascade)

  @@index([bentoBlockId], name: "idx_bento_content_bento_id")
  @@map("bento_item_content")
}

///////////////////////////
// PROJECT
///////////////////////////

model Project {
  id        Int             @id @default(autoincrement())
  title     String
  members   ProjectMember[]
  blocks    Block[]
  resources Bibliotheque[]

  @@map("project")
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  projectId Int         @map("project_id")
  profileId String      @map("user_id")
  role      ProjectRole

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([projectId, profileId], name: "idx_project_member")
  @@map("project_member")
}

model Bibliotheque {
  id          Int    @id @default(autoincrement())
  label       String
  description String
  url         String
  projectId   Int    @map("project_id")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], name: "idx_bibliotheque_project_id")
  @@map("bibliotheque")
}

model Block {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  url         String
  type        BlockType
  projectId   Int       @map("project_id")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], name: "idx_block_project_id")
  @@map("block")
}
